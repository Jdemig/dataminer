{"version":3,"sources":["../src/index.js"],"names":["extractAllAnchors","url","urls","resp","axios","get","html","data","Object","entries","map","anchorArray","isNaN","push","attribs","href","err","doPrimaryDomainsMatch","url1","url2","primaryDomain","getExternalUrls","originUrl","filter","foundUrls","externalUrls","console","log"],"mappings":";;AAAA;;AACA;;AAEA;;;;;;AAIA,MAAMA,iBAAiB,GAAG,MAAOC,GAAP,IAAe;AACvC,MAAI;AACF,QAAIC,IAAI,GAAG,EAAX;AACA,UAAMC,IAAI,GAAG,MAAMC,eAAMC,GAAN,CAAUJ,GAAV,CAAnB;AACA,UAAMK,IAAI,GAAGH,IAAI,CAACI,IAAlB;AAEAC,IAAAA,MAAM,CAACC,OAAP,CAAe,sBAAE,GAAF,EAAOH,IAAP,CAAf,EAA6BI,GAA7B,CAAkCC,WAAD,IAAiB;AAChD,UAAI,CAACC,KAAK,CAACD,WAAW,CAAC,CAAD,CAAZ,CAAV,EAA4B;AAC1BT,QAAAA,IAAI,CAACW,IAAL,CAAUF,WAAW,CAAC,CAAD,CAAX,CAAeG,OAAf,CAAuBC,IAAjC;AACD;AACF,KAJD;AAMA,WAAOb,IAAP;AACD,GAZD,CAYE,OAAOc,GAAP,EAAY;AACZ,WAAOA,GAAP;AACD;AACF,CAhBD;;AAkBA,MAAMC,qBAAqB,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAE5C,MAAI,+BAAiBD,IAAjB,EAAuBE,aAAvB,KAAyC,+BAAiBD,IAAjB,EAAuBC,aAApE,EAAmF;AACjF,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD,CAND;AAUA;;;;;;;;AAMA,MAAMC,eAAe,GAAG,CAACC,SAAD,EAAYpB,IAAZ,KAAqB;AAC3C,SAAOA,IAAI,CAACqB,MAAL,CAAatB,GAAD,IAAS;AAC1B,QAAI,CAAC,+BAAiBA,GAAjB,EAAsBmB,aAA3B,EAA0C;AACxC,aAAO,KAAP;AACD,KAFD,MAEO,IAAI,CAACH,qBAAqB,CAACK,SAAD,EAAYrB,GAAZ,CAA1B,EAA4C;AACjD,aAAOA,GAAP;AACD;;AACD,WAAO,KAAP;AACD,GAPM,CAAP;AAQD,CATD;;AAWA,CAAC,YAAY;AACX,QAAMuB,SAAS,GAAG,MAAMxB,iBAAiB,CAAC,sBAAD,CAAzC;AAEA,QAAMyB,YAAY,GAAGJ,eAAe,CAAC,sBAAD,EAAyBG,SAAzB,CAApC;AAEAE,EAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ;AACD,CAND","sourcesContent":["import axios from 'axios';\nimport $ from 'cheerio';\n\nimport getUrlAttributes from './lib/getUrlAttributes';\n\nimport { getRoute } from './lib/getUrlAttributes';\n\nconst extractAllAnchors = async (url) => {\n  try {\n    let urls = [];\n    const resp = await axios.get(url);\n    const html = resp.data;\n\n    Object.entries($('a', html)).map((anchorArray) => {\n      if (!isNaN(anchorArray[0])) {\n        urls.push(anchorArray[1].attribs.href);\n      }\n    });\n\n    return urls;\n  } catch (err) {\n    return err;\n  }\n}\n\nconst doPrimaryDomainsMatch = (url1, url2) => {\n\n  if (getUrlAttributes(url1).primaryDomain === getUrlAttributes(url2).primaryDomain) {\n    return true;\n  }\n  return false;\n}\n\n\n\n/**\n * @param {*Expects the uri of the origin domain} originUrl \n * @param {*Expects a list of uri's that were found on the origin domain} urls \n * \n * Compares the origin url with the list of other urls found on origin url and returns a url not of the same domain as the origin\n */\nconst getExternalUrls = (originUrl, urls) => {\n  return urls.filter((url) => {\n    if (!getUrlAttributes(url).primaryDomain) {\n      return false;\n    } else if (!doPrimaryDomainsMatch(originUrl, url)) {\n      return url;\n    }\n    return false;\n  });\n}\n\n(async () => {\n  const foundUrls = await extractAllAnchors('https://fluxteck.com');\n\n  const externalUrls = getExternalUrls('https://fluxteck.com', foundUrls);\n\n  console.log(externalUrls);\n})();\n\n\n"],"file":"index.js"}